1. **Общие концепции DevOps:**
    - Опишите, что такое DevOps и какие проблемы оно решает в процессе разработки и эксплуатации ПО.
2. **CI/CD (Continuous Integration and Continuous Deployment):**
    - Объясните, что такое CI/CD и почему оно важно в DevOps.
    - Перечислите основные этапы CI/CD пайплайна.
3. **Мониторинг и логирование:**
    - Зачем необходимо мониторинг в DevOps и какие инструменты вы знаете для этого?
    - Объясните различие между мониторингом и логированием.
4. **Контейнеризация и Docker:**
    - Объясните, что такое контейнеры и чем они отличаются от виртуальных машин.
    - Перечислите основные команды Docker для работы с контейнерами.
5. **Сетевые основы:**
    - Объясните, что такое NAT и как оно работает.
    - Что такое DNS и как оно используется в сетях?
6. **Git и управление версиями:**
    - Объясните, что такое ветвление (branching) в Git и зачем оно нужно.
    - Как создать новую ветку и переключиться на нее в Git?
7. **Безопасность:**
    - Какие основные методы обеспечения безопасности вы знаете для серверов и сервисов?
    - Что такое SSH и как его используют для безопасного доступа к серверам?
8. **Оркестрация:**
    - Что такое оркестрация контейнеров и зачем она нужна?
    - Какие оркестраторы контейнеров вы знаете и используете?
9. **Docker-compose**
    - Объясните, что делает docker-compose.yml файл выше.
    - Опишите шаги, как запустить этот проект с помощью Docker Compose.
    - Как можно изменить файл, чтобы добавить том для хранения данных PostgreSQL?
        
        ![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/a6a28e91-3290-4b9a-9b3a-44ecb9750508/bed62bbd-8245-4453-b4ee-c9aeda0cffc8/Untitled.png)
        
10.  Практическое задание
    - Создайте Dockerfile для Django Python приложения (только Dockerfile, приложение нам не нужно) где:
        
        ```
        1. Зависимости устанавливаются через pip3 install -r requirements.txt
        2. Запуск происходит через команду python3 manage.py runserver 0.0.0.0:8000
        3. и requirements.txt и manage.py находятся в корневой директории проекта
        ```
        
    - Создайте docker-compose.yml файл с Django приложением (образ которого должен собираться из Dockerfile который вы сделали), условным frontend и postgres где:
        
        ```
        1. frontend на порте 3000, билдится из абстрактной директории frontend, запускается командой "run 0.0.0.0"
        2. Используется postgres 16 на базе alpine linux 
        3. Контейнеры между собой общаются, балансер не нужен
        ```
        
        **Дополнительно (не обязательно, но будет огромным плюсом если сделаете):**
        
        С помощью системы heathcheck в docker-compose сделайте так, чтобы контейнер frontend запускался только когда django работает стабильно, а django запускался только когда postgres работает стабильно.
        endpoint для проверки Django: http://localhost:8000/health/ (он ничего не возвращает)
        

### Cдача тестового задания:

**Необходимо предоставить ссылку на репозиторий с проектом, содержащим README файл, Dockerfile и docker-compose.yml который вы сделали:**

- Фамилия Имя;
- Название задания: Тестовое задание для DevOps-инженера;
- Описание проекта;
- В README.md файле должны быть ответы на вопросы;
- Загрузить проект на GitHub и отправить ссылку на репозиторий;

Помните, что каждое задание — это возможность для роста. Не бойтесь сложностей: именно они делают нас сильнее и опытнее. Мы верим в вас и ваши способности, и с нетерпением ждём увидеть, как вы справитесь с этим вызовом. Удачи и вперёд к новым вершинам!

С уважением,
команда Guider.
